#include "dobot_m1_alarm.hpp"

namespace dobot_api
{
  const char *GetAlarmsCodeName(const AlarmCode value)
  {
    const char *s = 0;
#define PROCESS_VAL(p) \
  case (p):            \
    s = #p;            \
    break;
    switch (value)
    {
      PROCESS_VAL(ERR_COMMON_RESET);
      PROCESS_VAL(ERR_COMMON_MAX);

      PROCESS_VAL(ERR_PLAN_INV_SINGULARITY)
      PROCESS_VAL(ERR_PLAN_INV_CALC);
      PROCESS_VAL(ERR_PLAN_INV_LIMIT);
      PROCESS_VAL(ERR_PLAN_PUSH_DATA_REPEAT);
      PROCESS_VAL(ERR_PLAN_ARC_INPUT_PARAM);
      PROCESS_VAL(ERR_PLAN_JUMP_PARAM);
      PROCESS_VAL(ERR_PLAN_LINE_HAND);
      PROCESS_VAL(ERR_PLAN_LINE_OUT_SPACE);
      PROCESS_VAL(ERR_PLAN_ARC_OUT_SPACE);
      PROCESS_VAL(ERR_PLAN_MOTIONTYPE);
      PROCESS_VAL(ERR_PLAN_SPEED_INPUT_PARAM);
      PROCESS_VAL(ERR_PLAN_CP_CALC);
      PROCESS_VAL(ERR_PLAN_MAX);

      PROCESS_VAL(ERR_MOVE_INV_SINGULARITY);
      PROCESS_VAL(ERR_MOVE_INV_CALC);
      PROCESS_VAL(ERR_MOVE_INV_LIMIT);
      PROCESS_VAL(ERR_MOVE_MAX);

      PROCESS_VAL(ERR_OVERSPEED_AXIS1);
      PROCESS_VAL(ERR_OVERSPEED_AXIS2);
      PROCESS_VAL(ERR_OVERSPEED_AXIS3);
      PROCESS_VAL(ERR_OVERSPEED_AXIS4);
      PROCESS_VAL(ERR_OVERSPEED_MAX);

      PROCESS_VAL(ERR_LIMIT_AXIS1_POS);
      PROCESS_VAL(ERR_LIMIT_AXIS1_NEG);
      PROCESS_VAL(ERR_LIMIT_AXIS2_POS);
      PROCESS_VAL(ERR_LIMIT_AXIS2_NEG);
      PROCESS_VAL(ERR_LIMIT_AXIS3_POS);
      PROCESS_VAL(ERR_LIMIT_AXIS3_NEG);
      PROCESS_VAL(ERR_LIMIT_AXIS4_POS);
      PROCESS_VAL(ERR_LIMIT_AXIS4_NEG);
      PROCESS_VAL(ERR_LIMIT_AXIS23_POS);
      PROCESS_VAL(ERR_LIMIT_AXIS23_NEG);
      PROCESS_VAL(ERR_LIMIT_MAX);

      PROCESS_VAL(ERR_LOSE_STEP_AXIS1);
      PROCESS_VAL(ERR_LOSE_STEP_AXIS2);
      PROCESS_VAL(ERR_LOSE_STEP_AXIS3);
      PROCESS_VAL(ERR_LOSE_STEP_AXIS4);
      PROCESS_VAL(ERR_LOSE_STEP_MAX);

      PROCESS_VAL(ERR_OTHER_AXIS1_DRV_ALARM);
      PROCESS_VAL(ERR_OTHER_AXIS1_OVERFLOW);
      PROCESS_VAL(ERR_OTHER_AXIS1_FOLLOW);
      PROCESS_VAL(ERR_OTHER_AXIS2_DRV_ALARM);
      PROCESS_VAL(ERR_OTHER_AXIS2_OVERFLOW);
      PROCESS_VAL(ERR_OTHER_AXIS2_FOLLOW);
      PROCESS_VAL(ERR_OTHER_AXIS3_DRV_ALARM);
      PROCESS_VAL(ERR_OTHER_AXIS3_OVERFLOW);
      PROCESS_VAL(ERR_OTHER_AXIS3_FOLLOW);
      PROCESS_VAL(ERR_OTHER_AXIS4_DRV_ALARM);
      PROCESS_VAL(ERR_OTHER_AXIS4_OVERFLOW);
      PROCESS_VAL(ERR_OTHER_AXIS4_FOLLOW);
      PROCESS_VAL(ERR_OTHER_MAX);

      PROCESS_VAL(ERR_MOTOR_REAR_ENCODER);
      PROCESS_VAL(ERR_MOTOR_REAR_TEMPERATURE_HIGH);
      PROCESS_VAL(ERR_MOTOR_REAR_TEMPERATURE_LOW);
      PROCESS_VAL(ERR_MOTOR_REAR_LOCK_CURRENT);
      PROCESS_VAL(ERR_MOTOR_REAR_BUSV_HIGH);
      PROCESS_VAL(ERR_MOTOR_REAR_BUSV_LOW);
      PROCESS_VAL(ERR_MOTOR_REAR_OVERHEAT);
      PROCESS_VAL(ERR_MOTOR_REAR_RUNAWAY);
      PROCESS_VAL(ERR_MOTOR_REAR_BATTERY_LOW);
      PROCESS_VAL(ERR_MOTOR_REAR_PHASE_SHORT);
      PROCESS_VAL(ERR_MOTOR_REAR_PHASE_WRONG);
      PROCESS_VAL(ERR_MOTOR_REAR_LOST_SPEED);
      PROCESS_VAL(ERR_MOTOR_REAR_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_ENCODER_REAR_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_MOTOR_REAR_CAN_BROKE);
      PROCESS_VAL(ERR_MOTOR_REAR_MAX);

      PROCESS_VAL(ERR_MOTOR_FRONT_ENCODER);
      PROCESS_VAL(ERR_MOTOR_FRONT_TEMPERATURE_HIGH);
      PROCESS_VAL(ERR_MOTOR_FRONT_TEMPERATURE_LOW);
      PROCESS_VAL(ERR_MOTOR_FRONT_LOCK_CURRENT);
      PROCESS_VAL(ERR_MOTOR_FRONT_BUSV_HIGH);
      PROCESS_VAL(ERR_MOTOR_FRONT_BUSV_LOW);
      PROCESS_VAL(ERR_MOTOR_FRONT_OVERHEAT);
      PROCESS_VAL(ERR_MOTOR_FRONT_RUNAWAY);
      PROCESS_VAL(ERR_MOTOR_FRONT_BATTERY_LOW);
      PROCESS_VAL(ERR_MOTOR_FRONT_PHASE_SHORT);
      PROCESS_VAL(ERR_MOTOR_FRONT_PHASE_WRONG);
      PROCESS_VAL(ERR_MOTOR_FRONT_LOST_SPEED);
      PROCESS_VAL(ERR_MOTOR_FRONT_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_ENCODER_FRONT_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_MOTOR_FRONT_CAN_BROKE);
      PROCESS_VAL(ERR_MOTOR_FRONT_MAX);

      PROCESS_VAL(ERR_MOTOR_Z_ENCODER);
      PROCESS_VAL(ERR_MOTOR_Z_TEMPERATURE_HIGH);
      PROCESS_VAL(ERR_MOTOR_Z_TEMPERATURE_LOW);
      PROCESS_VAL(ERR_MOTOR_Z_LOCK_CURRENT);
      PROCESS_VAL(ERR_MOTOR_Z_BUSV_HIGH);
      PROCESS_VAL(ERR_MOTOR_Z_BUSV_LOW);
      PROCESS_VAL(ERR_MOTOR_Z_OVERHEAT);
      PROCESS_VAL(ERR_MOTOR_Z_RUNAWAY);
      PROCESS_VAL(ERR_MOTOR_Z_BATTERY_LOW);
      PROCESS_VAL(ERR_MOTOR_Z_PHASE_SHORT);
      PROCESS_VAL(ERR_MOTOR_Z_PHASE_WRONG);
      PROCESS_VAL(ERR_MOTOR_Z_LOST_SPEED);
      PROCESS_VAL(ERR_MOTOR_Z_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_ENCODER_Z_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_MOTOR_Z_CAN_BROKE);
      PROCESS_VAL(ERR_MOTOR_Z_MAX);

      PROCESS_VAL(ERR_MOTOR_R_ENCODER);
      PROCESS_VAL(ERR_MOTOR_R_TEMPERATURE_HIGH);
      PROCESS_VAL(ERR_MOTOR_R_TEMPERATURE_LOW);
      PROCESS_VAL(ERR_MOTOR_R_LOCK_CURRENT);
      PROCESS_VAL(ERR_MOTOR_R_BUSV_HIGH);
      PROCESS_VAL(ERR_MOTOR_R_BUSV_LOW);
      PROCESS_VAL(ERR_MOTOR_R_OVERHEAT);
      PROCESS_VAL(ERR_MOTOR_R_RUNAWAY);
      PROCESS_VAL(ERR_MOTOR_R_BATTERY_LOW);
      PROCESS_VAL(ERR_MOTOR_R_PHASE_SHORT);
      PROCESS_VAL(ERR_MOTOR_R_PHASE_WRONG);
      PROCESS_VAL(ERR_MOTOR_R_LOST_SPEED);
      PROCESS_VAL(ERR_MOTOR_R_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_ENCODER_R_NOT_STANDARDIZE);
      PROCESS_VAL(ERR_MOTOR_R_CAN_BROKE);
      PROCESS_VAL(ERR_MOTOR_R_MAX);

      PROCESS_VAL(ERR_MOTOR_ENDIO_IO);
      PROCESS_VAL(ERR_MOTOR_ENDIO_RS485_WRONG);
      PROCESS_VAL(ERR_MOTOR_ENDIO_CAN_BROKE);
      PROCESS_VAL(ERR_MOTOR_ENDIO_MAX);
    }
#undef PROCESS_VAL

    return s;
  }

  uint32_t AlarmStateToCode(alarmState alarmstate)
  {
    int len = sizeof(alarmstate); // 32
    uint32_t code = 0;
    for (int i = 0; i < len; i++)
    {
      uint8_t val = alarmstate.value[i];
      if (val == 0)
      {
        code += 8;
        continue;
      }
      uint8_t tmp = 0;
      while (val >>= 1)
      {
        ++tmp;
      }
      return code + tmp + 1;
    }
    return 0;
  }

}