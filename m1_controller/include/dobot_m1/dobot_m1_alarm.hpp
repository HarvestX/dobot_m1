#pragma once

#include <stdint.h>

namespace dobot_api
{
  struct alarmState
  {
    uint8_t value[32];
  };

  enum AlarmCode
  {
    // Common error
    ERR_COMMON_MIN = 0x00,
    ERR_COMMON_RESET = ERR_COMMON_MIN,
    ERR_COMMON_MAX = 0x0f,

    // Plan error
    ERR_PLAN_MIN = 0x10,
    ERR_PLAN_INV_SINGULARITY = ERR_PLAN_MIN,
    ERR_PLAN_INV_CALC,
    ERR_PLAN_INV_LIMIT,
    ERR_PLAN_PUSH_DATA_REPEAT,
    ERR_PLAN_ARC_INPUT_PARAM,
    ERR_PLAN_JUMP_PARAM,
    ERR_PLAN_LINE_HAND,
    ERR_PLAN_LINE_OUT_SPACE,
    ERR_PLAN_ARC_OUT_SPACE,
    ERR_PLAN_MOTIONTYPE,
    ERR_PLAN_SPEED_INPUT_PARAM,
    ERR_PLAN_CP_CALC,
    ERR_PLAN_MAX = 0x1f,

    // Move error
    ERR_MOVE_MIN = 0x20,
    ERR_MOVE_INV_SINGULARITY = ERR_MOVE_MIN,
    ERR_MOVE_INV_CALC,
    ERR_MOVE_INV_LIMIT,
    ERR_MOVE_MAX = 0x2f,

    // Over speed error
    ERR_OVERSPEED_MIN = 0x30,
    ERR_OVERSPEED_AXIS1 = ERR_OVERSPEED_MIN,
    ERR_OVERSPEED_AXIS2,
    ERR_OVERSPEED_AXIS3,
    ERR_OVERSPEED_AXIS4,
    ERR_OVERSPEED_MAX = 0x3f,

    // Limit error
    ERR_LIMIT_MIN = 0x40,
    ERR_LIMIT_AXIS1_POS = ERR_LIMIT_MIN,
    ERR_LIMIT_AXIS1_NEG,
    ERR_LIMIT_AXIS2_POS,
    ERR_LIMIT_AXIS2_NEG,
    ERR_LIMIT_AXIS3_POS,
    ERR_LIMIT_AXIS3_NEG,
    ERR_LIMIT_AXIS4_POS,
    ERR_LIMIT_AXIS4_NEG,
    ERR_LIMIT_AXIS23_POS,
    ERR_LIMIT_AXIS23_NEG,
    ERR_LIMIT_MAX = 0x4f,

    // Lose Step error
    ERR_LOSE_STEP_MIN = 0x50,
    ERR_LOSE_STEP_AXIS1 = ERR_LOSE_STEP_MIN,
    ERR_LOSE_STEP_AXIS2,
    ERR_LOSE_STEP_AXIS3,
    ERR_LOSE_STEP_AXIS4,
    ERR_LOSE_STEP_MAX = 0x5f,

    // Other error
    ERR_OTHER_MIN = 0x60,
    ERR_OTHER_AXIS1_DRV_ALARM = ERR_OTHER_MIN,
    ERR_OTHER_AXIS1_OVERFLOW,
    ERR_OTHER_AXIS1_FOLLOW,
    ERR_OTHER_AXIS2_DRV_ALARM,
    ERR_OTHER_AXIS2_OVERFLOW,
    ERR_OTHER_AXIS2_FOLLOW,
    ERR_OTHER_AXIS3_DRV_ALARM,
    ERR_OTHER_AXIS3_OVERFLOW,
    ERR_OTHER_AXIS3_FOLLOW,
    ERR_OTHER_AXIS4_DRV_ALARM,
    ERR_OTHER_AXIS4_OVERFLOW,
    ERR_OTHER_AXIS4_FOLLOW,
    ERR_OTHER_MAX = 0x6f,

    ERR_MOTOR_REAR_MIN = 0x70,
    ERR_MOTOR_REAR_ENCODER = ERR_MOTOR_REAR_MIN,
    ERR_MOTOR_REAR_TEMPERATURE_HIGH,
    ERR_MOTOR_REAR_TEMPERATURE_LOW,
    ERR_MOTOR_REAR_LOCK_CURRENT,
    ERR_MOTOR_REAR_BUSV_HIGH,
    ERR_MOTOR_REAR_BUSV_LOW,
    ERR_MOTOR_REAR_OVERHEAT,
    ERR_MOTOR_REAR_RUNAWAY,
    ERR_MOTOR_REAR_BATTERY_LOW,
    ERR_MOTOR_REAR_PHASE_SHORT,
    ERR_MOTOR_REAR_PHASE_WRONG,
    ERR_MOTOR_REAR_LOST_SPEED,
    ERR_MOTOR_REAR_NOT_STANDARDIZE,
    ERR_ENCODER_REAR_NOT_STANDARDIZE,
    ERR_MOTOR_REAR_CAN_BROKE,
    ERR_MOTOR_REAR_MAX = 0x7f,

    ERR_MOTOR_FRONT_MIN = 0x80,
    ERR_MOTOR_FRONT_ENCODER = ERR_MOTOR_FRONT_MIN,
    ERR_MOTOR_FRONT_TEMPERATURE_HIGH,
    ERR_MOTOR_FRONT_TEMPERATURE_LOW,
    ERR_MOTOR_FRONT_LOCK_CURRENT,
    ERR_MOTOR_FRONT_BUSV_HIGH,
    ERR_MOTOR_FRONT_BUSV_LOW,
    ERR_MOTOR_FRONT_OVERHEAT,
    ERR_MOTOR_FRONT_RUNAWAY,
    ERR_MOTOR_FRONT_BATTERY_LOW,
    ERR_MOTOR_FRONT_PHASE_SHORT,
    ERR_MOTOR_FRONT_PHASE_WRONG,
    ERR_MOTOR_FRONT_LOST_SPEED,
    ERR_MOTOR_FRONT_NOT_STANDARDIZE,
    ERR_ENCODER_FRONT_NOT_STANDARDIZE,
    ERR_MOTOR_FRONT_CAN_BROKE,
    ERR_MOTOR_FRONT_MAX = 0x8f,

    ERR_MOTOR_Z_MIN = 0x90,
    ERR_MOTOR_Z_ENCODER = ERR_MOTOR_Z_MIN,
    ERR_MOTOR_Z_TEMPERATURE_HIGH,
    ERR_MOTOR_Z_TEMPERATURE_LOW,
    ERR_MOTOR_Z_LOCK_CURRENT,
    ERR_MOTOR_Z_BUSV_HIGH,
    ERR_MOTOR_Z_BUSV_LOW,
    ERR_MOTOR_Z_OVERHEAT,
    ERR_MOTOR_Z_RUNAWAY,
    ERR_MOTOR_Z_BATTERY_LOW,
    ERR_MOTOR_Z_PHASE_SHORT,
    ERR_MOTOR_Z_PHASE_WRONG,
    ERR_MOTOR_Z_LOST_SPEED,
    ERR_MOTOR_Z_NOT_STANDARDIZE,
    ERR_ENCODER_Z_NOT_STANDARDIZE,
    ERR_MOTOR_Z_CAN_BROKE,
    ERR_MOTOR_Z_MAX = 0x9f,

    ERR_MOTOR_R_MIN = 0xA0,
    ERR_MOTOR_R_ENCODER = ERR_MOTOR_R_MIN,
    ERR_MOTOR_R_TEMPERATURE_HIGH,
    ERR_MOTOR_R_TEMPERATURE_LOW,
    ERR_MOTOR_R_LOCK_CURRENT,
    ERR_MOTOR_R_BUSV_HIGH,
    ERR_MOTOR_R_BUSV_LOW,
    ERR_MOTOR_R_OVERHEAT,
    ERR_MOTOR_R_RUNAWAY,
    ERR_MOTOR_R_BATTERY_LOW,
    ERR_MOTOR_R_PHASE_SHORT,
    ERR_MOTOR_R_PHASE_WRONG,
    ERR_MOTOR_R_LOST_SPEED,
    ERR_MOTOR_R_NOT_STANDARDIZE,
    ERR_ENCODER_R_NOT_STANDARDIZE,
    ERR_MOTOR_R_CAN_BROKE,
    ERR_MOTOR_R_MAX = 0xAf,

    ERR_MOTOR_ENDIO_MIN = 0xB0,
    ERR_MOTOR_ENDIO_IO = ERR_MOTOR_ENDIO_MIN,
    ERR_MOTOR_ENDIO_RS485_WRONG,
    ERR_MOTOR_ENDIO_CAN_BROKE,
    ERR_MOTOR_ENDIO_MAX = 0xBf,
  };

  const char *GetAlarmsCodeName(const AlarmCode value);
  uint32_t AlarmStateToCode(alarmState alarmstate);

}